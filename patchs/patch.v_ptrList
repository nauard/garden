diff -Nur v_merged/individu.cpp v_ptrList/individu.cpp
--- v_merged/individu.cpp	2014-01-22 14:44:19.189656774 +0100
+++ v_ptrList/individu.cpp	2013-12-19 15:27:08.000000000 +0100
@@ -14,10 +14,6 @@
     y = 10;
     // points de vie de départ
     points = 10;  //  1 + (int) (10.0 * (rand() / (RAND_MAX + 1.0))); // de 1 a 10
-    prev = NULL;
-    next = NULL;
-    first = NULL;
-    last = NULL;
 }
 
 
diff -Nur v_merged/individu.h v_ptrList/individu.h
--- v_merged/individu.h	2014-01-22 14:44:20.245660668 +0100
+++ v_ptrList/individu.h	2013-12-18 17:29:31.000000000 +0100
@@ -5,11 +5,6 @@
 class individu {
  public:
     int indice;
-    individu *prev;
-    individu *next;
-    individu *first;
-    individu *last;
-
     
     individu(int);
     void walk();
diff -Nur v_merged/main.cpp v_ptrList/main.cpp
--- v_merged/main.cpp	2014-01-28 11:55:40.112149942 +0100
+++ v_ptrList/main.cpp	2014-01-22 15:53:58.125032057 +0100
@@ -5,8 +5,8 @@
 #include <time.h>
 #include <string.h>
 #include "board.h"
+#include "myList.h"
 #include "individu.h"
-#include "utilities.h"
 
 #define INP_CMD_FIC_NAME "cmd_input"
 #define OUT_CMD_FIC_NAME "cmd_output"
@@ -15,6 +15,19 @@
 int living = 0;		// nb entites vivantes
 
 
+/* enlève l'individu dont l'indice est num */
+void remove_ind_num(myList *liste, int num) {
+    individu *current_ind = NULL;
+
+    elem_t *elem = liste->begin();
+    while (elem) {
+	current_ind = (individu*) elem->content;
+	if (current_ind->indice == num) {
+	    liste->remove(elem);
+	}
+	elem = elem->next;
+    }
+}
 
 
 /* compare 2 chaines entre elles et renvoie true si elles sont égales */
@@ -24,18 +37,19 @@
 
 
 /* affiche un statut de tous les individus dans le fichier de sortie de commandes */
-void dump_ind_status(int round, individu *List_ind) {
+void dump_ind_status(int round, myList *List_ind) {
     individu *current_ind = NULL;
     FILE *fic_out = NULL;
 
     fic_out = fopen(OUT_CMD_FIC_NAME, "w");
     if (fic_out != NULL) {
 	fprintf(fic_out, "round(%d) living(%d)\n", round, living);
-	current_ind = List_ind->first;
-	while (current_ind) {
+	elem_t *elem = List_ind->begin();
+	while (elem) {
+	    current_ind = (individu*) elem->content;
 	    fprintf(fic_out, "ind(%d) pos(%d,%d) points(%d)\n",
 		    current_ind->indice, current_ind->get_x_pos(), current_ind->get_y_pos(), current_ind->get_points());
-	    current_ind = current_ind->next;
+	    elem = elem->next;
 	}
 	fclose(fic_out);
     }
@@ -68,27 +82,25 @@
 
     // création du terrain
     board *Terrain = new board(LARG_TERRAIN);
-    individu *List_ind = new individu(-1);
+    myList *List_ind = new myList();
 	
     // création des individus
     for ( i = 0 ; i < START_NB_IND ; i++ ) {
 	individu *Ind = new individu(i);
-	addToList(List_ind, Ind);
+	List_ind->add(Ind);
     }
 	
     living = START_NB_IND;
 
     // simulation loop
     while (living > 0) {
-	current_ind = List_ind->first;
+	elem_t* elem = List_ind->begin();
 	// new round
         round++;
-        // on ne le print que tous les 10 tours seulement
-        if (round % 10 == 0) {
-            printf("round : %d      living : %d\n", round, living);
-        }
+	printf("round : %d      living : %d\n", round, living);
 	// pour chaque individu
-	while (current_ind) {
+	while (elem) {
+	    current_ind = (individu*) elem->content;
 	    // on le fait évoluer
 	    current_ind->walk();
             x = current_ind->get_x_pos();
@@ -99,11 +111,11 @@
 		printf("ind(%d) has fallen : %d, %d\n", current_ind->indice, x, y);
 		return 1;
 		// on le sort de la liste
-		removeFromList(List_ind, current_ind);
+		List_ind->remove(elem);
 		living--;
 		printf("living : %d\n", living);
 		// on passe au suivant
-		current_ind = current_ind->next;
+		elem = elem->next;
 		continue;
 	    }
 
@@ -116,26 +128,26 @@
             }
 
 	    // statut
-	    // printf("round(%d) ind(%d) pos(%d,%d) points(%d)\n",
-	    //        round, current_ind->indice, x, y, current_ind->get_points());
+	    printf("round(%d) ind(%d) pos(%d,%d) points(%d)\n",
+		   round, current_ind->indice, x, y, current_ind->get_points());
 
 
 	    // Is current living ?
 	    if (current_ind->get_points() <= 0) {
 		printf("ind(%d) is over : %d\n", current_ind->indice, current_ind->get_points());
 		// on le sort de la liste
-		removeFromList(List_ind, current_ind);
+		List_ind->remove(elem);
 		living--;
 		printf("living : %d\n", living);
 	    }
 
 	    // individu suivant
-	    current_ind = current_ind->next;
+	    elem = elem->next;
 	}
 
 	// On laisse l'herbe repousser
 	Terrain->regen(round);
-	// printf("\n");
+	printf("\n");
 
 	// traitement des commandes
 	fic_cmd = NULL;
@@ -156,14 +168,7 @@
 		// le 1er on s'en fiche, on sait deja que c'est 'kill'
 		strtok(cmd," ");
 		char *sPid = strtok(NULL," ");
-		bool success = remove_ind_num( List_ind, atoi(sPid) );
-                if (success) {
-                    sprintf(msg, "killing individual : %s", sPid);
-                    living--;
-                } else {
-                    sprintf(msg, "no such individual : %s", sPid);
-                }
-		dump_out(msg);
+		remove_ind_num( List_ind, atoi(sPid) );
 	    } else if (strlen(cmd) != 0) {
 		sprintf(msg, "unknown command : %s", cmd);
 		dump_out(msg);
diff -Nur v_merged/Makefile v_ptrList/Makefile
--- v_merged/Makefile	2014-01-27 14:13:46.707106543 +0100
+++ v_ptrList/Makefile	2013-12-19 15:39:38.000000000 +0100
@@ -1,4 +1,4 @@
-OBJECTS = main.o individu.o board.o cellule.o utilities.o
+OBJECTS = main.o individu.o board.o cellule.o myList.o
 
 CPP = g++
 CFLAGS = -g -Wall
diff -Nur v_merged/myList.cpp v_ptrList/myList.cpp
--- v_merged/myList.cpp	1970-01-01 01:00:00.000000000 +0100
+++ v_ptrList/myList.cpp	2013-12-24 14:29:20.000000000 +0100
@@ -0,0 +1,39 @@
+#include "myList.h"
+#include <stdlib.h>
+
+
+elem_t *myList::begin() {
+    return first;
+}
+
+void myList::add(void* ptr) {
+    elem_t* elem = new elem_t;
+    elem->content = ptr;
+    elem->next = NULL;
+
+    if (first == NULL) {
+	first = elem;
+    } else {
+	last->next = elem;
+	elem->prev = last;
+    }
+    last = elem;
+}
+
+void myList::remove(elem_t* elem) {
+    // on lie le prÃ©cÃ©dent ver le suivant
+    if (elem->prev == NULL) {
+	// Si c'est le 1er de la liste
+	first = elem->next;
+    } else {
+	elem->prev->next = elem->next;
+    }
+    // on lie le suivant ver le prÃ©cÃ©dent
+    if (elem->next == NULL) {
+	// Si c'est le dernier de la liste
+	last = elem->prev;
+    } else {
+	elem->next->prev = elem->prev;
+    }
+}
+
diff -Nur v_merged/myList.h v_ptrList/myList.h
--- v_merged/myList.h	1970-01-01 01:00:00.000000000 +0100
+++ v_ptrList/myList.h	2013-12-24 11:33:05.000000000 +0100
@@ -0,0 +1,19 @@
+//#include "individu.h"
+
+struct elem_t {
+    void* content;
+    elem_t *prev;
+    elem_t *next;
+};
+
+class myList {
+ public:
+    void add(void*);
+    void remove(elem_t *);
+    elem_t* begin();
+    elem_t* end();
+
+ private:
+    elem_t* first;
+    elem_t* last;
+};
diff -Nur v_merged/spec.h v_ptrList/spec.h
--- v_merged/spec.h	2014-01-27 15:21:52.067264035 +0100
+++ v_ptrList/spec.h	2013-12-17 14:44:00.000000000 +0100
@@ -10,6 +10,6 @@
 // nombre de cellule qui ont poussé au départ
 #define START_CELL	32
 // vitesse de régénération de l'herbe en rounds
-#define REGEN_SPEED	10
+#define REGEN_SPEED	7
 // pause entre chaque round (secondes)
 #define PAUSE		2
diff -Nur v_merged/TODO v_ptrList/TODO
--- v_merged/TODO	2014-01-28 16:05:56.231229176 +0100
+++ v_ptrList/TODO	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-- sur arret de world, les 2 shells read & watch doivent se stopper
-- faire un moniteur de ind
\ No newline at end of file
diff -Nur v_merged/utilities.cpp v_ptrList/utilities.cpp
--- v_merged/utilities.cpp	2014-01-27 15:18:59.482631321 +0100
+++ v_ptrList/utilities.cpp	1970-01-01 01:00:00.000000000 +0100
@@ -1,53 +0,0 @@
-/**********
- * Utilities
- ***********/
-
-#include "individu.h"
-
-/* ajout Ã  la liste chainee */
-void addToList(individu *liste, individu* elem) {
-    elem->next = NULL;
-
-    if (liste->first == NULL) {
-	liste->first = elem;
-    } else {
-	liste->last->next = elem;
-	elem->prev = liste->last;
-    }
-    liste->last = elem;
-}
-
-/* retrait de la liste chainee */
-void removeFromList(individu *liste, individu* elem) {
-    // on lie le prÃ©cÃ©dent ver le suivant
-    if (elem->prev == NULL) {
-	// Si c'est le 1er de la liste
-	liste->first = elem->next;
-    } else {
-	elem->prev->next = elem->next;
-    }
-    // on lie le suivant ver le prÃ©cÃ©dent
-    if (elem->next == NULL) {
-	// Si c'est le dernier de la liste
-	liste->last = elem->prev;
-    } else {
-	elem->next->prev = elem->prev;
-    }
-}
-
-/* enlÃ¨ve l'individu dont l'indice est num */
-bool remove_ind_num(individu *liste, int num) {
-    individu *current_ind = NULL;
-
-    current_ind = liste->first;
-    while (current_ind) {
-	if (current_ind->indice == num) {
-	    removeFromList(liste, current_ind);
-            return true;
-	}
-	current_ind = current_ind->next;
-    }
-
-    return false;
-}
-
diff -Nur v_merged/utilities.h v_ptrList/utilities.h
--- v_merged/utilities.h	2014-01-27 15:20:45.643020709 +0100
+++ v_ptrList/utilities.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,8 +0,0 @@
-/* ajout Ã  la liste chainee */
-void addToList(individu *liste, individu* elem);
-
-/* retrait de la liste chainee */
-void removeFromList(individu *liste, individu* elem);
-
-/* enlÃ¨ve l'individu dont l'indice est num */
-bool remove_ind_num(individu *liste, int num);
